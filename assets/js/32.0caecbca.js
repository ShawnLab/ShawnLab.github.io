(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{413:function(s,t,a){"use strict";a.r(t);var e=a(2),r=Object(e.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("p",[s._v("V2Ray 原生支持 Socks、HTTP、Shadowsocks、VMess 等协议，目前已经全平台支持 Windows、Mac、Linux、Android、iOS 等操作系统的使用，助你畅爽体验互联网。相对起 Shadowsocks 来说属于后起之秀，在混淆能力、兼容性、速度上有着独到的优点。")]),s._v(" "),a("blockquote",[a("p",[s._v("官方推荐的 GUI "),a("a",{attrs:{href:"https://v2ray.com/awesome/tools.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("客户端"),a("OutboundLink")],1),s._v(" 不做详细介绍，除了 iOS 版本需要付费，其余均免费。服务端方面强烈推荐开启 BBR 拥塞控制提高吞吐量减少延迟。")])]),s._v(" "),a("h2",{attrs:{id:"服务器端安装"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#服务器端安装"}},[s._v("#")]),s._v(" 服务器端安装")]),s._v(" "),a("p",[s._v("V2Ray 提供了一个在 Linux 中的自动化安装脚本。这个脚本会自动检测有没有安装过 V2Ray，如果没有，则进行完整的安装和配置；如果之前安装过 V2Ray ，则只更新 V2Ray 二进制程序而不更新配置。")]),s._v(" "),a("blockquote",[a("p",[s._v("以下指令假设已在 "),a("code",[s._v("su")]),s._v(" 环境下，如果不是，请先运行 "),a("code",[s._v("sudo su")]),s._v("。")])]),s._v(" "),a("p",[s._v("运行下面的指令下载并安装 V2Ray。")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("bash")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("curl")]),s._v(" -L -s https://install.direct/go.sh"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])])]),a("p",[s._v("看到类似于下面这样的提示就算安装成功了，如果安装不成功脚本会有红色的提示语句，这个时候你应当按照提示除错，除错后再重新执行一遍脚本安装 V2Ray。对于错误提示如果看不懂，使用翻译软件翻译一下就好。")]),s._v(" "),a("div",{staticClass:"language-output extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("PORT:xxxxx\nUUID:xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxx\nCreated symlink from /etc/systemd/system/multi-user.target.wants/v2ray.service to /lib/systemd/system/v2ray.service.\nV2Ray v3.xx is installed.\n")])])]),a("h2",{attrs:{id:"vmess协议"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vmess协议"}},[s._v("#")]),s._v(" VMess协议")]),s._v(" "),a("p",[s._v("脚本默认配置好了 VMess 协议。在首次安装完成之后，V2Ray 不会自动启动，需要手动运行下列命令操作 V2Ray。服务器端 V2Ray 启动后把脚本安装命令输出的 PORT:和 UUID：后面的参数输入客户端就可畅游网络了。")]),s._v(" "),a("p",[s._v("使用以下命令启动 V2Ray:")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("systemctl start v2ray\n")])])]),a("p",[s._v("停止运行 V2Ray：")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("systemctl stop v2ray\n")])])]),a("p",[s._v("重启 V2Ray:")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("systemctl restart v2ray\n")])])]),a("h2",{attrs:{id:"shadowsocks协议"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#shadowsocks协议"}},[s._v("#")]),s._v(" Shadowsocks协议")]),s._v(" "),a("p",[s._v("要支持 Shadowsocks 协议，需要修改配置文件，在 inbound[]中的｛vmess｝协议下中增加｛shadowsocks｝片段代码，修改后重启 V2Ray 生效，配置文件路径为 /etc/v2ray/config.json。")]),s._v(" "),a("div",{staticClass:"language-json extra-class"},[a("pre",{pre:!0,attrs:{class:"language-json"}},[a("code",[a("span",{pre:!0,attrs:{class:"token property"}},[s._v('"inbound"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n     "),a("span",{pre:!0,attrs:{class:"token property"}},[s._v('"protocol"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"vmess"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n\n     ...\n\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n     "),a("span",{pre:!0,attrs:{class:"token property"}},[s._v('"protocol"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"shadowsocks"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n\n     "),a("span",{pre:!0,attrs:{class:"token property"}},[s._v('"port"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("30001")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n\n     "),a("span",{pre:!0,attrs:{class:"token property"}},[s._v('"settings"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n       "),a("span",{pre:!0,attrs:{class:"token property"}},[s._v('"method"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"aes-256-cfb"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n\n       "),a("span",{pre:!0,attrs:{class:"token property"}},[s._v('"password"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"password"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n\n       "),a("span",{pre:!0,attrs:{class:"token property"}},[s._v('"udp"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n\n       "),a("span",{pre:!0,attrs:{class:"token property"}},[s._v('"network"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"tcp"')]),s._v("\n\n     "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n")])])]),a("h3",{attrs:{id:"自定义参数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#自定义参数"}},[s._v("#")]),s._v(" 自定义参数")]),s._v(" "),a("ul",[a("li",[s._v('"port": 端口,')]),s._v(" "),a("li",[s._v('"password": "密码",')]),s._v(" "),a("li",[s._v('"method": "加密方法",')])]),s._v(" "),a("p",[s._v("详细说明请参照"),a("a",{attrs:{href:"https://v2ray.com/chapter_02/02_protocols.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("官方文档"),a("OutboundLink")],1)]),s._v(" "),a("h2",{attrs:{id:"bbr-拥塞控制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#bbr-拥塞控制"}},[s._v("#")]),s._v(" BBR 拥塞控制")]),s._v(" "),a("p",[s._v("BBR 是 Google 开源的拥塞控制算法，已提交给 Linux 内核。 BBR 算法可以显著提高吞吐量并减少连接延迟起到加速效果，内核从 4.9 开始已经内置该算法。")]),s._v(" "),a("p",[s._v("命令 "),a("code",[s._v("uname -r")]),s._v("  可查看内核，内核低的自个去升级吧，这里不做相关概述。")]),s._v(" "),a("p",[s._v("命令  "),a("code",[s._v("lsmod | grep bbr")]),s._v(" 查看 BBR 模块是否载入，如果结果中没有  "),a("code",[s._v("tcp_bbr")]),s._v("  的话就执行下述命令，一行一个。")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("modprobe tcp_bbr  \n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"tcp_bbr"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),s._v(" /etc/modules-load.d/modules.conf\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"net.core.default_qdisc=fq"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),s._v(" /etc/sysctl.conf  \n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"net.ipv4.tcp_congestion_control=bbr"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),s._v(" /etc/sysctl.conf  \n")])])]),a("p",[s._v("保存生效")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("sysctl -p\n")])])]),a("p",[s._v("执行")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("sysctl net.ipv4.tcp_available_congestion_control  \nsysctl net.ipv4.tcp_congestion_control  \n")])])]),a("p",[s._v("如果结果都有 "),a("code",[s._v("bbr")]),s._v(" , 则证明你的内核已开启 bbr。看到有 tcp_bbr 模块即说明 bbr 已启动，这样，就可以畅爽体验互联网了。")])])}),[],!1,null,null,null);t.default=r.exports}}]);